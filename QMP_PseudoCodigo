//-----------MODELADO DE CARACTERISTICAS-------------

enum Tipo{
    CAMISA(Categoria.PARTE_SUP, (Material.ALGODON,Material.SEDA)),
    PANTALON(Categoria.PARTE_INF,(Material.JEAN,Material.ALGODON)),
    ZAPATOS(Categoria.CALZADO,(Material.CUERO)),
    ANTEOJOS_DE_SOL(Categoria.ACCESORIOS,(Material.PLASTICO,Material.MADERA));

    Categoria categoria;
    Lista<Material> materialesDisponibles;

    Tipo(Categoria categoria,Lista<Material> materialesDisponibles){
        this.categoria=categoria;
        this.materialesDisponibles = materialesDisponibles;
    }
    Categoria getCategoria(){return categoria;}
    Lista<Material> getMaterialesDisponibles(){return materialesDisponibles;}
}

enum Categoria{
    PARTE_SUP,PARTE_INF,CALZADO,ACCESORIOS;
}

enum Material{
    ALGODON,NYLON,SEDA,JEAN,PLASTICO,MADERA;
}

enum Trama{
    LISA,RAYADA,LUNARES,CUADROS,ESTAMPADA;
}

clase Color{
    int nivelRojo;
    int nivelVerde;
    int nivelAzul;
    
    Color(int nivelRojo,int nivelVerde,int nivelAzul){
        this.nivelRojo = nivelRojo;
        this.nivelVerde = nivelVerde;
        this.nivelAzul = nivelAzul;
    }
}

//---------------PRENDA-------------------//

clase BuilderDePrenda{
    Tipo tipo;
    Trama trama = Trama.LISA;
    Material material;
    Color colorPrincipal;
    Color colorSecundario;

    BuilderDePrenda(Tipo tipo){
        this.tipo = tipo;
    }

    boolean materialValido(Material materialPrenda){
        return tipo.getMaterialesDisponibles().contains(materialPrenda);
    }
    
    void verificadorPrenda(){
        if(material.isNull())
        tirar excepcionMaterialNoDefinido();
        if(colorPrincipal.isNull())
        tirar excepcionColorPrincipalNoDefinido();
    }

    //Setteo obligatorio (Color Principal y Material)

    void setAspectoPrincipal(Color colorPrincipalPrenda,Material materialPrenda){
        if(!materialValido(materialPrenda)){
            tirar excepcionMaterialInvalido("El material no esta disponible para ese tipo")
        }
        material = materialPrenda;
        colorPrincipal = colorPrincipalPrenda;
    }

    //Setteo opcional (Trama y Color Secundario)

    void setColorSecundario(Color colorSecundarioPrenda){
        colorSecundario = colorSecundarioPrenda;
    }
    void setTrama(Trama tramaPrenda){
        trama = tramaPrenda;
    }

    //Guardar borrador

    void guardarBorrador(BorradorDePrenda borradorUltimaPrenda){
        borradorUltimaPrenda.agregarPrendaPendiente(this);
    }

    //Crear prenda con las caracteristicas elegidas

    Prenda crearPrenda()
        verificadorPrenda();
        Prenda nuevaPrenda = new Prenda();
        nuevaPrenda.setCaracteristicas(tipo, trama, material, colorPrincipal, colorSecundario);
        return nuevaPrenda;
    }   
}

clase Prenda{
    Tipo tipo;
    Trama trama;
    Categoria categoria;
    Material material;
    Color colorPrincipal;
    Color colorSecundario;
    
    void setCaracteristicas(Tipo tipo,Trama trama,Material material,Color colorPrincipal,Color colorSecundario){
        this.tipo = tipo;
        this.categoria = tipo.getCategoria();
        this.trama = trama;
        this.material = material;
        this.colorPrincipal = colorPrincipal;
        this.colorSecundario = colorSecundario;
    }

    Categoria getCategoria(){
        return categoria;
    }
}

clase Usuario{
    Lista<BuilderDePrenda> prendaBorrador = new Lista<>();

    void agregarPrendaPendiente(BuilderDePrenda prendaEnProceso){
        prendaBorrador.add(prendaEnProceso);
    }

    BuilderDePrenda recuperarBorrador(int indice){
        BuilderDePrenda prendaARecuperar = prendaBorrador.get(indice);
        prendaBorrador.remove(indice);
        return prendaARecuperar;
    }

    //Como se aclaro arriba habria una unica instancia de borrador
}

//-------------ATUENDO------------//

clase Atuendo{
    Prenda parteSuperior;
    Prenda parteInferior;
    Prenda calzado;
    Prenda accesorio;

    Atuendo(Prenda parteSuperior,Prenda parteInferior,Prenda calzado,Prenda accesorio){
        verificarAtuendo(parteSuperior,parteInferior,calzado,accesorio);
        this.parteSuperior = parteSuperior;
        this.parteInferior = parteInferior;
        this.calzado = calzado;
        this.accesorio = accesorio;
    }

    void verificarCategoria(Prenda prenda, Categoria categoria){
        if(prenda.getCategoria() != categoria)
        tirar excepcionCategoriaErronea("La categoria no concuerda");
    }

    void verificarAtuendo(Prenda parteSup,Prenda parteInf,Prenda calza,Prenda acces){
        verificarCategoria(parteSup, PARTE_SUP);
        verificarCategoria(parteInf, PARTE_INF);
        verificarCategoria(calza, CALZADO);
        verificarCategoria(acces, ACCESORIOS);
    }

}

clase Uniforme extends Atuendo{

    Uniforme(Prenda parteSuperior,Prenda parteInferior,Prenda calzado){
        verificarUniforme(parteSuperior,parteInferior,calzado);
        this.parteSuperior = parteSuperior;
        this.parteInferior = parteInferior;
        this.calzado = calzado;
    }

    verificarUniforme(Prenda parteSup,Prenda parteInf,Prenda calza){
        verificarCategoria(parteSup, Categoria.PARTE_SUP);
        verificarCategoria(parteInf, Categoria.PARTE_INF);
        verificarCategoria(calza, Categoria.CALZADO);
    }
}


/*  
Mensaje final: 

    En este caso use un builder para poder identificar cuando una prenda no estaba
terminada, ya que cuando lo esta se crea utilizando un metodo que la buildea. Por eso mismo
prenda no tiene constructor pero si setters. 
    Por otro lado la otra duda importante que me quedo era la diferencia entre los uniformes y un 
"atuendo comun", no termine de entender bien ese requerimiento
    Por lo demas a mi se me ocurrio plantearlo asi pero puede estar horriblemente ejecutado, con cosas
de las que ni yo estaba muy seguro como dejar en Null algunos atributos.
*/
